FROM php:8.3-apache-bullseye

RUN curl -o /usr/local/share/ca-certificates/NTUT_CA.crt https://raw.githubusercontent.com/JoeyChen-NTUT/php-7.3-apache/master/NTUT_Computer_And_Network_Center_Root_CA.crt
RUN update-ca-certificates --fresh

RUN export DEBIAN_FRONTEND=noninteractive
RUN apt clean
RUN apt update
RUN apt install -y apt-utils
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

#modify php.ini for env require
RUN cp /usr/local/etc/php/php.ini-production /usr/local/etc/php/php.ini
RUN sed -i -e 's/max_execution_time = 30/max_execution_time = 300/g' /usr/local/etc/php/php.ini && \
    sed -i -e 's/upload_max_filesize = 2M/upload_max_filesize = 4G/g' /usr/local/etc/php/php.ini && \
    sed -i -e 's/post_max_size = 8M/post_max_size = 10G/g' /usr/local/etc/php/php.ini && \
    sed -i -e 's/memory_limit = 128M/memory_limit = 4G/g' /usr/local/etc/php/php.ini && \
    sed -i -e 's/;date.timezone =/date.timezone = Asia\/Taipei/g' /usr/local/etc/php/php.ini && \
    sed -i -e 's/max_file_uploads = 20/max_file_uploads = 300/g' /usr/local/etc/php/php.ini && \
    sed -i -e 's/max_input_time = 60/max_input_time = 120/g' /usr/local/etc/php/php.ini

#install zip extensions
RUN apt-get install -y \
        libzip-dev \
        zip \
  && docker-php-ext-configure zip \
  && docker-php-ext-install zip

#install gd extensions
RUN apt-get install -y \
    libfreetype6-dev \
        libmcrypt-dev \
        libjpeg-dev \
        libpng-dev \
        libmcrypt-dev \
        libonig-dev \
    && docker-php-ext-configure gd \
#        --enable-gd-native-ttf \
#        --with-freetype-dir=/usr/include/freetype2 \
#        --with-png-dir=/usr/include \
#        --with-jpeg-dir=/usr/include \
    && docker-php-ext-install gd \
    && docker-php-ext-install mbstring \
    && docker-php-ext-enable gd
   

#install mysqli extensions
RUN docker-php-ext-install pdo pdo_mysql sockets && docker-php-ext-enable pdo pdo_mysql sockets


RUN echo 'export INFORMIXDIR="/opt/IBM/Informix_Client-SDK"' >> /root/.bashrc && \
echo 'export LD_LIBRARY_PATH="$INFORMIXDIR/lib:$INFORMIXDIR/lib/esql:$INFORMIXDIR/cli:$LD_LIBRARY_PATH"' >> /root/.bashrc && \
echo 'export SHLIB_PATH="$INFORMIXDIR/lib/esql"' >> /root/.bashrc && \
echo 'export LIBPATH="$INFORMIXDIR/lib/esql"' >> /root/.bashrc && \
echo 'export ODBCINI="/etc/odbc.ini"' >> /root/.bashrc && \
echo 'export ODBCSYSINI="/etc"' >> /root/.bashrc

RUN echo 'export INFORMIXDIR="/opt/IBM/Informix_Client-SDK"' >> /etc/apache2/envvars && \
echo 'export LD_LIBRARY_PATH="$INFORMIXDIR/lib:$INFORMIXDIR/lib/esql:$INFORMIXDIR/cli:$LD_LIBRARY_PATH"' >> /etc/apache2/envvars && \
echo 'export SHLIB_PATH="$INFORMIXDIR/lib/esql"' >> /etc/apache2/envvars && \
echo 'export LIBPATH="$INFORMIXDIR/lib/esql"' >> /etc/apache2/envvars && \
echo 'export ODBCINI="/etc/odbc.ini"' >> /etc/apache2/envvars && \
echo 'export ODBCSYSINI="/etc"' >> /etc/apache2/envvars


#install odbc and informix

RUN apt-get install unixodbc unixodbc-dev libncurses5 libelf-dev -y

COPY csdk.tar.parta* /tmp/

RUN cat /tmp/csdk.tar.parta* > /tmp/csdk.tar && \
    mkdir /tmp/csdk && \
    tar -xvf /tmp/csdk.tar -C /tmp/csdk

RUN /bin/bash -c '/tmp/csdk/installclientsdk -i silent -DLICENSE_ACCEPTED=TRUE' && \
    rm -rf /tmp/csdk*

# Install PHP odbc extension
# https://github.com/docker-library/php/issues/103
RUN set -x \
    && docker-php-source extract \
    && cd /usr/src/php/ext/odbc \
    && phpize \
    && sed -ri 's@^ *test +"\$PHP_.*" *= *"no" *&& *PHP_.*=yes *$@#&@g' configure \
    && ./configure --with-unixODBC=shared,/usr \
    && docker-php-ext-install odbc \
    && docker-php-source delete
#RUN docker-php-ext-configure pdo_odbc --with-pdo-odbc=unixODBC,/usr \
# && docker-php-ext-install pdo_odbc


#enable mods
RUN a2enmod rewrite
